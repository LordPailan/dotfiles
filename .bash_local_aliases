#!/bin/bash
# vi: ft=sh ts=2 sw=2

# functions and aliases, loaded on session start.
# By using meaningful one-line comments to functions, they'll get nicely printed
# by means of the 'my_commands' help function (defined in ~/.bashrc)

PYTHON_3_SUFFIX="_p3.6"

# re-source all aliases
alias.source() {
  source "${HOME}/.bash_local_aliases"
}

# Edit aliases fast
alias.edit() {
  vim "${HOME}/.bash_local_aliases" "${HOME}/.bash_private_aliases"
}

# kills anything similar to argument passed
sys.kill() {
  regex=$1
  while [ ! -z "${regex}" ] ; do
    ps aux | grep -i ${regex} | awk '{print $2}' | xargs kill -9 > /dev/null 2>&1
    shift
    regex=$1
  done
}

# Returns true if the current dir is a git repository
is.repo() {
  [ ! -z "$(git rev-parse \
    --git-dir --is-inside-git-dir \
    --is-bare-repository --is-inside-work-tree \
    --short HEAD 2>/dev/null)" ]
}

# Convert a file from RST to Markdown
rst2md() {
  [ -z "$(which pandoc)" ] && error "pandoc is not installed"

  local input="$1"
  [ -z "${input}" -o "${input}" = "${input//.rst/}" ] && \
    error "Need a rst file as input"

  local output="${input//.rst/.md}"
  pandoc "${input}" -f rst -t markdown -o "${output}"
}

# Report of disk space usage in current path
sys.disk_usage() {
  for dir in $(ls -h .) ; do
    total=$(du -ch "$dir" | grep total | grep -E -o "[0-9]+[GM]")
    [ ! -z "${total}" ] && echo "Disk usage in $dir: $total"
  done
}

# Find something similar to argument, from here downwards
sys.find() {
  local arg=$1
  shift
  [ ! -z "$*" ] && \
    echo "[WARNING] Ignoring extra input parameters: $*"
  find . -iname "*${arg}*"
}

# Rename a bunch of files
sys.renamer() {
  local where file_name file_dir
  where=${1:-.}
  for file in $(find "${where}" -type f -depth 1) ; do
    file_name="$(basename "$file")"
    file_dir="$(dirname "$file")"
    echo "Type in new name for ${file_name}? [Empty to ignore, \$ matches all]" && read new_name
    [ -z "${new_name}" ] && continue
    new_name="${new_name//\$/$file_name}"
    mv "${file_dir}/${file_name}" "${file_dir}/${new_name}"
  done
}

# Show a pretty error message that actually exits
error() {
  echo "[ERROR] $*" ;
  return 1
}

# 'Darwin' for Mac, 'Linux' or similar elsewhere
is.mac() {
  [ "$(uname -s)" == "Darwin" ]
}

_get_bash_completion() {
  is.mac && echo "/usr/local/etc/bash_completion"
}

_virtualenver.core() {
  local venv_name venv_dir venv_binaries venv_pip venv_activate venv_global_binary
  venv_name="$1" && shift
  venv_global_binary="$1" && shift
  venv_dir="$(cd "${HOME}/.venvs/" && pwd)/${venv_name}"
  venv_binaries="${venv_dir}/bin"
  venv_pip="${venv_binaries}/pip"
  venv_activate="${venv_binaries}/activate"

  # Virtualenv at a global level is a must
  [ -z "$(which virtualenv)" ] && pip install -q virtualenv

  # PIP is a hard requirement, make sure it exists
  [ ! -f "${venv_pip}" ] && ${venv_global_binary} "${venv_dir}"

  # Use pip syntax to install requirements
  local PARAMS=${*:-.}
  "${venv_pip}" install ${PARAMS}

  # I use this with Syntastic :-)
  "${venv_pip}" install pylint

  # Auto activate
  source "${venv_activate}"
}

_virtualenver3() {
  local venv_name venv_global_binary
  venv_name="$(basename "$PWD")$PYTHON_3_SUFFIX"
  venv_global_binary="virtualenv --python=python3.6"

  _virtualenver.core "${venv_name}" "${venv_global_binary}" "$@"
}

_virtualenver() {
  local venv_name venv_global_binary
  venv_name="$(basename "$PWD")$PYTHON_2_SUFFIX"
  venv_global_binary="virtualenv --python=python2.7"

  _virtualenver.core "${venv_name}" "${venv_global_binary}" "$@"
}

_activate.core() {
  local venv_name venv_dir venv_activate
  venv_name="$1"
  venv_dir="$(cd "${HOME}/.venvs/" && pwd)/${venv_name}"
  venv_activate="${venv_dir}/bin/activate"

  [ ! -f "${venv_activate}" ] && echo "No virtualenv called '$venv_name'" && return 1
  source ${venv_activate}
}

_activate3() {
  _activate.core "$(basename "$PWD")$PYTHON_3_SUFFIX"
}

_activate() {
  _activate.core "$(basename "$PWD")"
}

_repo() {
  local autocomplete_file="$(_get_bash_completion).d/repo"
  local base_dir="$(grep base_dir='.*' "${autocomplete_file}" | cut -d'=' -f2 | tr -d '"' )"
  if [ ! -d "${base_dir}" ] ; then
    read -r -e -p "Base repo dir is not set, or is not a directory. Enter path to repositories base dir: " input
    base_dir="${input/#\~/$HOME}"
    [ ! -d "${base_dir}" ] && \
      echo "Invalid directory: ${base_dir}" && return

    # Update automcomplete file:
    sed -i.bk -e "s#base_dir=.*#base_dir=\"${base_dir}\"#g" "${autocomplete_file}" && \
      rm -rf "${autocomplete_file}.bk"
    echo "Now create a new shell and start using the command" && return
  fi

  local orgs_dir="$1"
  local repo_name=$2
  local fulldir="${base_dir}/${orgs_dir}/${repo_name}"
  if [ ! -d "${fulldir}" ] ; then
    echo "'${fulldir}' is not a directory"
  else
    cd "${fulldir}" || return
  fi
}

_despawn() {
  local service=$1
  local service_name="spawned_${service//\//_}"
  local ids=$(docker ps -a | grep "${service_name}" | awk '{print $1}')
  [ ! -z "$ids" ] && \
    printf "Killing old '%s': %s\n" "$1" "$(docker rm -f "${ids}")"
}

_spawn() {
  # Service name MUST match image name
  local service=$1
  local service_name="spawned_${service//\//_}"
  shift

  # ports and stuff
  #args=$*

  # first kill old one, if any
  _despawn "${service}" || true

  # And spawn a new service
  printf "Spawning new '%s': %s'\n" "${service}" "$(docker run -d --rm  --name "${service_name}" "$@" "$service")"
}


# Free some Docker disk space
docker.free_space() {
  exited_ps_before=$(docker ps -a -q  -f 'status=exited')
  exited_ps_before_count=$(echo "${exited_ps_before}" | grep -v ^$ | wc -l | tr -d ' ')
  [ ${exited_ps_before_count} -gt 0 ] && \
    echo "Deleting ${exited_ps_before_count}  containers with status 'Exited'..." && \
    docker rm -f $(echo ${exited_ps_before} | xargs)

  dangling_images_before=$(docker images -q -a -f "dangling=true")
  dangling_images_before_count=$(echo "${dangling_images_before}" | grep -v ^$ | wc -l | tr -d ' ')
  [ ${dangling_images_before_count} -gt 0 ] && \
    echo "Deleting ${dangling_images_before_count} dangling images..." && \
    docker rmi -f $(echo ${dangling_images_before} | xargs)

  # Delete volumes
  docker volume rm $(docker volume ls -q)
}

# export AWS credentials for given profile
aws.load_credentials() {

  local profiles more_profiles aws_access_key_id aws_secret_access_key chosen_profile

  _unset() {
    unset AWS_PROFILE AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY
  }

  profiles=$(grep -o '\[.*\]' ~/.aws/credentials | tr -d "][" )
  more_profiles=$(grep -o '\[.*\]' ~/.aws/config | tr -d "][" | cut -d' ' -f2)
  profiles="$(echo $profiles $more_profiles | tr ' ' '\n' | sort -u | xargs)"

  chosen_profile=$1
  if [ -z "${chosen_profile}" ] ; then
    echo "You need to specify one AWS profile in this list:"  && echo "${profiles}"
    echo "Use '-1' to unload session"
    return 1
  fi

  if [ "${chosen_profile}" = "-1" ] ; then
    _unset
    echo "AWS information unloaded from session"
    return 0
  elif [ "${profiles}" = "${profiles//${chosen_profile}}" ] ; then
    echo "Profile '${chosen_profile}' not found. Valid profiles are:" && echo "${profiles}"
    echo "Use '-1' to unload session"
    return 2
  fi

  _unset
  export AWS_PROFILE=${chosen_profile}
  echo "AWS_PROFILE=${AWS_PROFILE}"

  aws_access_key_id=$(aws --profile "${AWS_PROFILE}" configure get aws_access_key_id)
  [ ! -z "${aws_access_key_id}" ] && \
    export AWS_ACCESS_KEY_ID=${aws_access_key_id} && \
    echo "AWS_ACCESS_KEY_ID=${aws_access_key_id}"

  aws_secret_access_key=$(aws --profile "${AWS_PROFILE}" configure get aws_secret_access_key)
  [ ! -z "${aws_secret_access_key}" ] && \
    export AWS_SECRET_ACCESS_KEY=${aws_secret_access_key} && \
    echo "AWS_SECRET_ACCESS_KEY=${aws_secret_access_key}"
}

# Remove given line from file
sys.delete_line() {
  [ $# -ne 2 ] && echo "Usage: delete_line <line_to_delete> <file_name>" && return 1
  line_no=$1
  file=$2
  [ ! -f "${file}" ] && echo "File does not exist" && return 1
  [ ${line_no} -gt $(wc -l $2| awk '{print $1}') ] && echo "Line ${line_no} not found in file ${file}" && return 1

  sed -i -e "${line_no}d" ${file}
}


# Remove duplicated lines from input file into stdout
sys.duprm() {
  if [ "$#" -ne 1 ] ; then
    echo "Missing input file"
    return 1
  fi
  awk '!x[$0]++' "$1"
}

# Allows overriding of VIM commands
vim() {
  first_param=$1
  case "${first_param}" in
    checkout|commit|pull|push)
      command echo "Lo que tu quieres es el 'git', negro.... en fin... que el día que me muera...." && read
      command git "$@"
      ;;
    vim*)
      shift ; vim "$@" ;;
    *)
      command vim "$@" ;;
  esac
}

# Allows overriding of GIT commands (try 'git blame ...')
git() {
  case "$1" in
    blame*)
      command echo "Probablemente tu, así que mejor no preguntes" ;;
    pushete*)
      # pushes current branch and opens browser in repo webpage
      branch_name=$(git rev-parse --abbrev-ref HEAD)
      [ ! -z "${branch_name}" ] && \
        git push -u origin "${branch_name}" && sch.open
      ;;
    git*)
      shift ; git "$@" ;;
    * )
      command git "$@" ;;
  esac
}

# Thanks: http://stackoverflow.com/questions/10683349/forcing-bash-to-expand-variables-in-a-string-loaded-from-a-file
# Runs all the shell commands written in the given file
shell.expansion() {
  file="$1"
  [ ! -f "$file" ] && echo "Not a file: $file." && exit 1

  data=$(< "$file")
  delimiter="__apply_shell_expansion_delimiter__"
  command="cat <<$delimiter"$'\n'"$data"$'\n'"$delimiter"
  eval "$command"
}

# Get the N% of the files of the input file
rand.lines() {
  in=$1
  N=$2

  if [ -z "$in"  ] || [ ! -f "$in" ] ; then
    echo "[ERROR] Invalid input file: Syntax is $0 <input_file> [<percentage of lines (Default: 10%)>]"
  else
    [ -z "$N" -o "$N" -lt 0 -o "$N" -gt 100 ] && N=10

    while read -r line ; do
      [ $((RANDOM % 100)) -le $N ] && echo "$line"
    done < "$in"
  fi
}

# Perform a faster, recursive and case-ignoring 'grep' search on a GIT repo.
gg() {
  pattern=$1
  path="."
  if [ $# -gt 1 ] ; then
    shift
    path="$*"
  fi
  git grep -iI "$pattern" "$path" | sed -e 's#^\([^:]*\):\(.*\)$#\1 -> \2#g' | grep -iI "$pattern" --color
}

# Typical shortcuts
! is.mac && alias ls='ls --color'
alias grep='grep --color'

# Fantastic when you are leaving the company and want to get all your job in one go
alias git.pull_all='for dir in $(find . -type d -depth 1) ; do (cd $dir && is.repo && git pull) ; done || true'
alias git.clean_all='for dir in $(find . -type d -depth 1) ; do (cd $dir && is.repo && git clean -dfx) ; done || true'
alias git.leaving_today='git.clean_all && git.pull_all && tar -cjvf /tmp/leaving_new_york_never_easy.bz2 . && mv /tmp/leaving_new_york_never_easy.bz2 . && printf "\n\nDone\nCopy \"leaving_new_york_never_easy.bz2\" somewhere and RUN. FAST\n\n"'

# so sweet
alias cd..='cd ..'

# Get you external IP fast
alias ip.mine='dig +short myip.opendns.com @resolver1.opendns.com'

# Get the owner of each branch, last commit and branch name
alias git.owners='is.repo && for branch in `git branch -r | grep -v HEAD`;do echo -e `git show --format="%an ---> %ai %ar" $branch | head -n 1` \\t$branch; done | sort -r'

# converters for files
alias sys.iso_to_utf='iconv --from-code=iso-8859-1 --to-code=utf-8'
alias sys.utf_to_iso='iconv --to-code=iso-8859-1 --from-code=utf-8'

# with X only, paste output of command into clipboard: echo 'AAA' | ccp
if is.mac ; then alias ccp='pbcopy' ; else alias ccp='xclip -selection clipboard' ; fi

# OSX override of AWK, if installed
is.mac && [ ! -z "$(which gawk)" ] && alias awk='gawk'

# Pushes production, develop, and all tags in one go
alias super.push='git push origin prod  && git push --tags && git push origin develop'

# Starts/stops a local Datascience notebook:  https://github.com/jupyter/docker-stacks/tree/master/datascience-notebook
alias spawn.ds-notebook='_spawn jupyter/datascience-notebook  -v $(pwd):/home/jovyan/work -p 8888:8888'
alias despawn.ds-notebook='_despawn jupyter/datascience-notebook'

# Starts/stops a Jupyter notebook being run
alias spawn.notebook='_spawn jupyter/all-spark-notebook  -v $(pwd):/home/jovyan/work -p 8888:8888'
alias despawn.notebook='_despawn jupyter/all-spark-notebook'

# Starts/stops a local redis instance
alias spawn.redis='_spawn redis -p 6379:6379'
alias despawn.redis='_despawn redis'

# Starts/stops a memcached instance
alias spawn.memcached='_spawn memcached -p 11211:11211'
alias despawn.memcached='_despawn memcached'

# VIM aliases, for great justice
alias bim="echo 'LOL eres un mamón, es ''vi'' o ''vim'', no va con B... te lo paso por esta' && read && vim $*"
alias vin="echo 'VIN?? 'Vin' qué, Diesel??? Madre mía, que paciencia...' && read && vim $*"

# Random 32-char string
alias rand.str="cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1"

# Automagically autocomplete repo names and 'cd' into them. Needs a proper base repo dir. Depends on bash_completion.
alias repo='_repo'

# Activate an existing Python 2/3 virtualenv in current directory
alias activate='_activate'
alias activate3='_activate3'

# Install and activate a Python 2/3 Virtualenv in current location
alias virtualenver='_virtualenver'
alias virtualenver3='_virtualenver3'

# Copy current path to clipboard - needs 'ccp'
alias ccpath="printf '%s' '$(pwd)' | ccp && echo '$(pwd) copied to Clipboard'"

# DO NOT VERSION THESE THANKS
[ -f ~/.bash_private_aliases ] && source ~/.bash_private_aliases
