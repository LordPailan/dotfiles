#!/bin/bash
# shellcheck source=/dev/null disable=2155 disable=2207 disable=2142
# vi: ft=sh ts=2 sw=2

# functions and aliases, loaded on session start.
# By using meaningful one-line comments to functions, they'll get nicely printed
# by means of the 'my_commands' help function (defined in ~/.bashrc)

# enable ansible 2.x
alias ansible.enable.27='_ansible_enable "2.7"'
alias ansible.enable.24='_ansible_enable "2.4"'
alias ansible.enable.29='_ansible_enable "2.9"'
_ansible_enable() {
  version=$1
  venv_dir="${VENVS_HOME}/ansible_${version}"
  [ -d "${venv_dir}" ] && source "${venv_dir}/bin/activate" && return

  venv_global_binary="virtualenv --python=python3.7"
  tmp_reqs=$(mktemp)
  echo "ansible==${version}" >> "${tmp_reqs}"
  _virtualenver.core "${venv_dir}" "${venv_global_binary}" "-r ${tmp_reqs}"
}

# disable Ansible
alias ansible.disable='deactivate'

# re-source all aliases
alias.source() {
  source "${HOME}/.bashrc"
}

# Edit .bashrc and .bash_profile fast -and reenable
bash.edit() {
  vim "${HOME}/.bash_profile" "${HOME}/.bashrc"
  alias.source
}

# Edit aliases fast -and reenable faster.
alias.edit() {
  vim "${HOME}/.bash_local_aliases" "${HOME}/.bash_private_vars"
  alias.source
}

# exports entries in a key=value file
sys.export() {
  [ ! -f "${1}" ] && \
    error "Error: ${1} is not a valid file"

  exported_lines=0
  ignored_lines=0
  while IFS= read -r line ; do
    key=$(echo "${line}" | cut -d'=' -f1 | tr -d ' ')
    [[ "$key" =~ ^#.* ]] && ignored_lines=$(( ignored_lines + 1 )) && continue

    value=$(echo "${line}" | cut -d'=' -f2- | tr -d ' ' | tr -d '"' | tr -d "'")
    export "${key}=${value}" && exported_lines=$(( exported_lines + 1 ))
  done < "${1}"
  echo "Successfully exported ${exported_lines} items from ${1}"
}

# kills anything similar to argument passed
sys.kill() {
  regex=$1
  while [ -n "${regex}" ] ; do
    pgrep "${regex}" | awk '{print $2}' | xargs kill -9 > /dev/null 2>&1
    shift
    regex=$1
  done
}

# Returns true if the current dir is a git repository
is.repo() {
  [ -n "$(git rev-parse \
    --git-dir --is-inside-git-dir \
    --is-bare-repository --is-inside-work-tree \
    --short HEAD 2>/dev/null)" ]
}

# Report of disk space usage in current path
sys.disk_usage() {
  echo "Disk usage report for '$(pwd)':"
  for dir in $(\ls  -h .) ; do
    total=$(du -ch "$dir" | grep total | grep -E -o "[0-9]+[GM]")
    [ -n "${total}" ] && printf "* %-20s: %s\n" "$dir" "$total"
  done
}

# Find something similar to argument, from here downwards
sys.find() {
  local arg=$1
  shift
  [ -n "$*" ] && \
    echo "[WARNING] Ignoring extra input parameters: $*"
  find . -iname "*${arg}*"
}

# Rename a bunch of files
sys.renamer() {
  local where file_name file_dir
  where=${1:-.}
  for file in $(find "${where}" -type f -depth 1) ; do
    file_name="$(basename "$file")"
    file_dir="$(dirname "$file")"
    echo "Type in new name for ${file_name}? [Empty to ignore, \$ matches all]" && read new_name
    [ -z "${new_name}" ] && continue
    new_name="${new_name//\$/$file_name}"
    mv "${file_dir}/${file_name}" "${file_dir}/${new_name}"
  done
}

# Show a pretty error message
error() { echo "[ERROR] $*" ; }

# 'Darwin' for Mac, 'Linux' or similar elsewhere
is.mac() {
  [ "$(uname -s)" == "Darwin" ]
}

is.debian() {
  command -v apt > /dev/null
}

is.arch() {
  command -v pacman > /dev/null
}

_get_bash_completion() {
  is.mac && echo "/usr/local/etc/bash_completion" || echo "/etc/bash_completion"
}

# Python Venv wrappers
PYTHON_36_SUFFIX="_p3.6"
PYTHON_37_SUFFIX="_p3.7"
PYTHON_38_SUFFIX="_p3.8"
PYTHON_3_SUFFIX="_p3"
PYTHON_2_SUFFIX="_p2.7"
#VENVS_HOME="$(cd "${HOME}/.venvs" && pwd)"

_venv.name() {
  root_dir=$( git rev-parse --show-toplevel 2> /dev/null || true )
  [ -z "${root_dir}" ] && root_dir="${PWD}"
  basename "${root_dir}"
}

_virtualenver.core() {
  local venv_suffix venv_python_binary
  venv_suffix="$1" && shift
  venv_python_binary="$1" && shift

  local venv_name venv_dir venv_binaries venv_pip venv_activate venv_global_binary
  venv_name="$(_venv.name)${venv_suffix}"
  venv_global_binary="virtualenv --python=${venv_python_binary}"
  venv_dir="${VENVS_HOME}/$( basename "${venv_name}" )"
  venv_binaries="${venv_dir}/bin"
  venv_pip="${venv_binaries}/pip"
  venv_activate="${venv_binaries}/activate"

  # Virtualenv at a global level is a must
  ! command -v virtualenv > /dev/null && pip install -q virtualenv

  # If venv'd PIP doesn't exist, install the virtualenv
  [ ! -f "${venv_pip}" ] && ${venv_global_binary} "${venv_dir}"

  # Use pip syntax to install requirements
  "${venv_pip}" install "${*:-.}"

  # I use this with Syntastic :-)
  "${venv_pip}" install pylint

  # Auto activate
  source "${venv_activate}"
}

# Install and activate a Python 2/3 Virtualenv in current location
virtualenver38() { _virtualenver.core "${PYTHON_38_SUFFIX}" "python3.8" "$@" ; }
virtualenver37() { _virtualenver.core "${PYTHON_37_SUFFIX}" "python3.7" "$@" ; }
virtualenver36() { _virtualenver.core "${PYTHON_36_SUFFIX}" "python3.6" "$@" ; }
virtualenver3()  { _virtualenver.core "${PYTHON_3_SUFFIX}" "python3" "$@" ; }
virtualenver2()  { _virtualenver.core "${PYTHON_2_SUFFIX}" "python2.7" "$@" ; }

_activate.core() {
  local venv_suffix venv_name venv_dir venv_activate
  venv_suffix=$1
  venv_name="$(_venv.name)$venv_suffix"
  venv_dir="${VENVS_HOME}/${venv_name}"
  venv_activate="${venv_dir}/bin/activate"

  [ ! -f "${venv_activate}" ] && echo "No virtualenv called '$venv_name'" && return 1
  source "${venv_activate}"
}

# Activate an existing Python 2/3 virtualenv in current directory
activate36() { _activate.core "$PYTHON_36_SUFFIX" ; }
activate37() { _activate.core "$PYTHON_37_SUFFIX" ; }
activate38() { _activate.core "$PYTHON_38_SUFFIX" ; }
activate3() {
  p3_suffixes="${PYTHON_36_SUFFIX} ${PYTHON_37_SUFFIX} ${PYTHON_38_SUFFIX}"
  base_name="$(_venv.name)"
  for venv_suffix in ${p3_suffixes} ; do
    venv_name="${base_name}$venv_suffix"
    venv_dir="${VENVS_HOME}/${venv_name}"
    [ -d "${venv_dir}" ] && \
      _activate.core "${venv_suffix}" && return
  done
  echo "No Python 3 virtualenv for ${base_name}"
}
activate2() { _activate.core "$PYTHON_2_SUFFIX" ; }

_despawn() {
  local service=$1
  local service_name="spawned_${service//\//_}"
  local ids=$(docker ps -a | grep "${service_name}" | awk '{print $1}')
  [ -n "$ids" ] && \
    printf "Killing old '%s': %s\n" "$1" "$(docker rm -f "${ids}")"
}

_spawn() {
  # Service name MUST match image name
  local service=$1
  local service_name="spawned_${service//\//_}"
  shift

  # ports and stuff
  #args=$*

  # first kill old one, if any
  _despawn "${service}" || true

  # And spawn a new service
  printf "Spawning new '%s': %s'\n" "${service}" "$(docker run -d --rm  --name "${service_name}" "$@" "$service")"
}


# Free some Docker disk space
docker.free_space() {
  exited_ps_before=$(docker ps -a -q  -f 'status=exited')
  exited_ps_before_count=$(echo "${exited_ps_before}" | grep -c -v ^$ )
  [ "${exited_ps_before_count}" -gt 0 ] && \
    echo "Deleting ${exited_ps_before_count}  containers with status 'Exited'..." && \
    docker rm -f "$(echo "${exited_ps_before}" | xargs)"

  dangling_images_before=$(docker images -q -a -f "dangling=true")
  dangling_images_before_count=$(echo "${dangling_images_before}" | grep -c -v ^$ )
  [ "${dangling_images_before_count}" -gt 0 ] && \
    echo "Deleting ${dangling_images_before_count} dangling images..." && \
    docker rmi -f "$(echo "${dangling_images_before}" | xargs)"

  # Delete volumes
  volumes=$(docker volume ls -q)
  [ -n "${volumes}" ] && \
    docker volume rm "${volumes}"
}

# export AWS credentials for given profile
aws.load_credentials() {
  _unset() { unset AWS_PROFILE AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY ; }
  _hint() { echo && echo "[HINT] Use '-1' to unload current session" ; }
  _debug() {
    echo "AWS_PROFILE=${AWS_PROFILE}"
    echo "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}"
    echo "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}"
    echo "AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}"
    echo "AWS_REGION=${AWS_REGION}"
  }

  # 'default' is not a profile we want to use
  local profiles more_profiles aws_access_key_id chosen_profile
  profiles=$(grep -o '\[.*\]' ~/.aws/credentials | tr -d "][" )
  more_profiles=$(grep -o '\[.*\]' ~/.aws/config | tr -d "][" | cut -d' ' -f2)
  profiles="$(echo "$profiles" "$more_profiles" | tr ' ' '\n' | grep -v 'default' | sort -u | xargs)"
  chosen_profile=$1 && shift
  if [ -z "${chosen_profile}" ] ; then
    echo "You need to choose one AWS profile from this list:"  && echo "${profiles}"
    _hint
    return 1
  elif [ "${chosen_profile}" = "-1" ] ; then
    _unset
    echo "AWS information unloaded from session"
    return 0
  elif [ "${chosen_profile}" == "--debug" ] ; then
    _debug
    return 0
  elif [ "${profiles}" = "${profiles//${chosen_profile}}" ] ; then
    echo "Profile '${chosen_profile}' not found. Valid profiles are:" && echo "${profiles}"
    _hint
    return 2
  fi

  _unset
  mfa_token=$1 && shift
  if [ -z "${mfa_token}" ] ; then
    echo "MFA token is missing, loading previous session..."
    _hint

    aws_access_key_id=$(aws configure get aws_access_key_id --profile "${chosen_profile}")
    [ -z "${aws_access_key_id}" ] && \
      echo && error "No credentials found, you need to authenticate again" && \
      return 3

    export AWS_PROFILE=${chosen_profile}
    export AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id)
    export AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key)
    export AWS_SESSION_TOKEN=$(aws configure get aws_session_token)
    export AWS_REGION=$(aws configure get region)
  else
    echo "Creating new temporary session with MFA token..."
    cross_account_role=$(aws configure get x_role_arn --profile "$chosen_profile")
    [ -z "${cross_account_role}" ] && \
      error "you need to configure chosen role ARN as 'x_role_arn' in ~/.aws/config, under [profile ${chosen_profile}" && \
      return 4

    mfa_iam=$(aws configure get x_mfa_serial --profile "$chosen_profile")
    [ -z "${cross_account_role}" ] && \
      error "you need to configure your MFA ARN as 'x_mfa_arn' in ~/.aws/config, under [profile ${chosen_profile}" && \
      return 5

    temp_keys=($(aws sts assume-role --role-arn "$cross_account_role" --role-session-name "session-${1}" --serial-number "$mfa_iam" --token-code "$mfa_token" --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' --output text || ''))

    [ "${#temp_keys[@]}" -eq 0 ] && return 6
    export AWS_PROFILE=${chosen_profile}
    export AWS_ACCESS_KEY_ID=${temp_keys[0]}
    export AWS_SECRET_ACCESS_KEY=${temp_keys[1]}
    export AWS_SESSION_TOKEN=${temp_keys[2]}
    export AWS_REGION=$(aws configure get region)

    aws configure set aws_secret_access_key "${AWS_SECRET_ACCESS_KEY}"
    aws configure set aws_access_key_id     "${AWS_ACCESS_KEY_ID}"
    aws configure set aws_session_token     "${AWS_SESSION_TOKEN}"
  fi
  #[ "${1}" == "--debug" ] && _debug
}

# Remove given line from file
sys.delete_line() {
  [ $# -ne 2 ] && echo "Usage: ${0} <line_to_delete> <file_name>" && return 1
  line_no=$1
  file=$2
  [ ! -f "${file}" ] && echo "File does not exist" && return 1
  [ "${line_no}" -gt "$(wc -l "${file}" | awk '{print $1}')" ] && echo "Line ${line_no} not found in file ${file}" && return 1

  sed -i -e "${line_no}d" "${file}"
}

# Remove given ~/.ssh/known_hosts line
ssh.delete_line() {
  [ $# -ne 1 ] && echo "Usage: ${0} <line_to_delete>" && return 1
  sys.delete_line "${1}" ~/.ssh/known_hosts
}


# Remove duplicated lines from input file into stdout
sys.duprm() {
  if [ "$#" -ne 1 ] ; then
    echo "Missing input file"
    return 1
  fi
  awk '!x[$0]++' "$1"
}

# # Allows overriding of VIM commands
# vim() {
#   first_param=$1
#   case "${first_param}" in
#     checkout|commit|pull|push)
#       command echo "Lo que tu quieres es el 'git', negro.... en fin... que el día que me muera...." && read
#       command git "$@"
#       ;;
#     git*)
#       shift;
#       command echo "Casi seguro que se te fué la olla again, vamos a pasar del vim ese.... me muero y no te educo..."
#       command git "$@" ;;
#     modified|mod*)
#       modified_files=$(git status -s | grep -v '^\s*M^' | sed -E 's/^.*M //g' | xargs)
#       command vim "${modified_files}" ;;
#     vim)
#       shift ; command vim "$@" ;;
#     *)
#       command vim "$@" ;;
#   esac
# }

# URL Escape a string
web.escape() {
  ! command -v perl > /dev/null && error "PERL is not installed in your system" && return 1
  perl -MURI::Escape -e 'print uri_escape($ARGV[0]);' "${1}"
}

# Allows overriding GIT commands
git() {

  _get_repo_n_project() {
    remote="$1" ; [ -z "${remote}" ] && \
      remote=$(git remote get-url --push origin)
    if echo "${remote}" | grep -q "${GITLAB_REPO}" ; then
      _get_gitlab_repo_and_project "$@"
    else
      _get_bb_repo_n_project "$@"
    fi
  }

  # Returns a two-item array!!
  _get_bb_repo_n_project() {
    repo_ssh="$1" ; [ -z "${repo_ssh}" ] && \
      repo_ssh=$(git remote show origin -n | grep 'Fetch URL' | cut -d':' -f2- | tr -d ' ')
    echo "${repo_ssh}" | sed -Ee 's#.*\.com(:[0-9]*/|:|/)##g' -e 's#\.git$##g' | tr '/' ' '
  }

  # Returns a two-item array!!
  _get_gitlab_repo_and_project() {
    repo_ssh="$1" ; [ -z "${repo_ssh}" ] && \
      repo_ssh="$(git remote get-url --push origin)"
    echo "${repo_ssh}" | grep -Eio '[0-9a-z]+\/[0-9a-z_-]+\.git$' | sed -e 's/.git$//' | tr '/' ' '
  }

  _get_repo_url() {
    repo_and_project=($( _get_repo_n_project "$1" ))
    remote="$1" ; [ -z "${remote}" ] && \
      remote=$(git remote get-url --push origin)
    if echo "${remote}" | grep -q "${GITLAB_REPO}" ; then
      printf "https://${GITLAB_REPO}/%s/%s" "${repo_and_project[0]}" "${repo_and_project[1]}"
    else
      printf "${BITBUCKET_REPO}/projects/%s/repos/%s" "${repo_and_project[0]}" "${repo_and_project[1]}"
    fi
  }

  _get_branch_name() {
    git rev-parse --abbrev-ref HEAD
  }

  case "$1" in
    help*)
      echo && command git --help && echo
      echo "Custom git commands:" && echo
      echo "  branchD   Delete all local, non-merged branches + unused remotes"
      echo "  perrete   Pushes current branchs and opens browser in the Pull Request page"
      echo "  pushete   Pushes current branch"
      echo "  open      Opens current repo's page in browser"
      echo "  klone     Clones given repo in ssh-format to ~/Stuff/<project>/<repo>"
      echo "  checkout  Uses fzf for fuzzy branch completion"
      ;;
    checkout)
      shift ; fuzzy_path=${1:-"."}
      if [ -f "${fuzzy_path}" ] ; then
        # it's a file!
        command git checkout "$@"
      elif [[ "${fuzzy_path}" =~ ^[0-9.]+$ ]] ; then
        # assuming a tag
        command git checkout "$@"
      elif [ "$(echo "${fuzzy_path}" | tr -d ' ' | wc -c)" -lt 4 ] ; then
        # do not fuzzy-anything with less than 3 chars
        command git checkout "$@"
      elif git branch -a | tr -d ' ' | sed  's/.*remotes\/origin\///' | sort -u | grep -q -E "^\*?${fuzzy_path}\$" ; then
        # exact match
        command git checkout "${fuzzy_path}"
      else
        # anything else, fuzzy search it
        echo "Using 'git checkout' wrapper with fzf, it it doesn't work use the -q flag"
        command git checkout "$(git branch -a | sed  's/.*remotes\/origin\///' | sort -u | grep -i "${fuzzy_path}" | fzf)"
      fi ;;
    blame*)
      echo "Probablemente tu, así que mejor no preguntes" ;;
    branchD*)
      git branch --no-color --merged | command grep -vE "^(\*|\s(master|develop|dev)\s$)" | command xargs -n 1 git branch -d
      git fetch -puta
      ;;
    perrete*)
      branch_name=$( _get_branch_name )
      command git push -u origin "${branch_name}"

      repo_and_project=($( _get_bb_repo_n_project ))
      project_url=$(printf "${BITBUCKET_REPO}/projects/%s/repos/%s/pull-requests" "${repo_and_project[0]}" "${repo_and_project[1]}")

      url_params=$(printf "create&targetBranch=refs/heads/develop&sourceBranch=refs/heads/%s" "${branch_name}")
      escaped_params=${url_params//\//%2F}

      final_url="${project_url}?${escaped_params}"
      sys.open "${final_url}"
      ;;
    pushete*)
      # pushes current branch and opens browser in repo webpage
      branch_name=$( _get_branch_name )
      [ -n "${branch_name}" ] && \
        command git push -u origin "${branch_name}" && git open
      ;;
    checkete*)
      # like checkout -b but parsing incoming text into a proper branch name
      shift; [ "${1}" == "-b" ] && shift;
      branch_name=$(echo "${@}" | sed -Ee 's/[[:space:]:]+/_/g' )
      command git checkout -b "${branch_name}"
      ;;
    git*)
      shift ; git "$@" ;;
    open*)
      shift ; project_url=$( _get_repo_url "$1" )
      sys.open "${project_url}"
      ;;
    klone*)
      shift; repo=$1 ; [ -z "${repo}" ] && return "$(command git clone "$@")"
      parts=($( _get_repo_n_project "${repo}" ))
      target_dir="$HOME/Stuff/${parts[0]}/${parts[1]}"
      [ ! -d "${target_dir}" ] && command git clone "${repo}" "${target_dir}"
      cd "${target_dir}" || return
      ;;
    *)
      command git "$@" ;;
  esac
}

# Open AWS console for given tool, using currently logged-in profile
aws.open() {
  region="$(aws configure get region)"
  [ -z "${region}" ] && region="eu-west-1"
  sys.open "https://${region}.console.aws.amazon.com/${1}"
}

# Opens something - an URL, a file.... (OS-independent)
sys.open() {
  open_command=xdg-open ; is.mac && open_command=open
  "${open_command}" "$@"
}

# Thanks: http://stackoverflow.com/questions/10683349/forcing-bash-to-expand-variables-in-a-string-loaded-from-a-file
# Runs all the shell commands written in the given file
shell.expansion() {
  file="$1"
  [ ! -f "$file" ] && echo "Not a file: $file." && exit 1

  data=$(< "$file")
  delimiter="__apply_shell_expansion_delimiter__"
  command="cat <<$delimiter"$'\n'"$data"$'\n'"$delimiter"
  eval "$command"
}

# Open Whatsapp web
web.whatsapp() {
  sys.open "https://web.whatsapp.com"
}

# Open Telegram web
web.telegram() {
  sys.open "https://web.telegram.org"
}

# Search for something from the commmand line
web.search() {
  engine="Duck Duck GO"
  base_url="https://duckduckgo.com/?q="
  search_string="$*"
  [ -z "${search_string}" ] && \
    error "I need something to search...." && return 1

  escaped_search_string=$( web.escape "${search_string}" )
  echo "Let's search for '${search_string}' using '${engine}'...."
  sys.open "${base_url}${escaped_search_string}"
}

# Perform a faster, recursive and case-ignoring 'grep' search on a GIT repo.
gg() {
  pattern=$1
  path="."
  if [ $# -gt 1 ] ; then
    shift
    path="$*"
  fi
  git grep -iI "$pattern" "$path" | sed -e 's#^\([^:]*\):\(.*\)$#\1 -> \2#g' | grep -iI "$pattern" --color
}

# mkdir -p + cd to newly created directory, in one go
mcd() {
  [ -n "${1}" ] && mkdir -p "$1" && (cd "$1" || true)
}

# Typical shortcuts
! is.mac && alias ls='ls --color'
alias grep='grep --color'

# Fantastic when you are leaving the company and want to get all your job in one go
alias git.pull_all='for dir in $(find . -type d -maxdepth 1) ; do (cd $dir && is.repo && git pull) ; done || true'
alias git.clean_all='for dir in $(find . -type d -maxdepth 1) ; do (cd $dir && is.repo && git clean -dfx) ; done || true'
alias git.leaving_today='git.clean_all && git.pull_all && tar -cjvf /tmp/leaving_new_york_never_easy.bz2 . && mv /tmp/leaving_new_york_never_easy.bz2 . && printf "\n\nDone\nCopy \"leaving_new_york_never_easy.bz2\" somewhere and RUN. FAST\n\n"'

# so sweet
alias cd..='cd ..'

# Get you external IP fast
alias ip.mine='dig +short myip.opendns.com @resolver1.opendns.com'

# Get the owner of each branch, last commit and branch name
alias git.owners='is.repo && for branch in `git branch -r | grep -v HEAD`;do echo -e `git show --format="%an ---> %ai %ar" $branch | head -n 1` \\t$branch; done | sort -r'

# converters for files
alias sys.iso_to_utf='iconv --from-code=iso-8859-1 --to-code=utf-8'
alias sys.utf_to_iso='iconv --to-code=iso-8859-1 --from-code=utf-8'

# with X only, paste output of command into clipboard: echo 'AAA' | ccp
if is.mac ; then alias ccp='pbcopy' ; else alias ccp='xclip -selection clipboard' ; fi

# Copy current path to clipboard - needs 'ccp'
alias ccpath='pwd | ccp'

# OSX override of AWK, if installed
is.mac && [ -n "$(command -v gawk > /dev/null)" ] && alias awk='gawk'

# Pushes production, develop, and all tags in one go
alias super.push='git push origin prod  && git push --tags && git push origin develop'

# Starts/stops a local Datascience notebook:  https://github.com/jupyter/docker-stacks/tree/master/datascience-notebook
alias spawn.ds-notebook='_spawn jupyter/datascience-notebook  -v "$(pwd):/home/jovyan/work" -p 8888:8888'
alias despawn.ds-notebook='_despawn jupyter/datascience-notebook'

# Starts/stops a Jupyter notebook being run
alias spawn.notebook='_spawn jupyter/all-spark-notebook  -v "$(pwd):/home/jovyan/work" -p 8888:8888'
alias despawn.notebook='_despawn jupyter/all-spark-notebook'

# Starts/stops a local redis instance
alias spawn.redis='_spawn redis -p 6379:6379'
alias despawn.redis='_despawn redis'

# Starts/stops a memcached instance
alias spawn.memcached='_spawn memcached -p 11211:11211'
alias despawn.memcached='_despawn memcached'

# VIM aliases, for great justice
alias bim="echo 'LOL eres un mamón, es ''vi'' o ''vim'', no va con B... te lo paso por esta' && read && vim \$*"
alias vin="echo 'VIN?? 'Vin' qué, Diesel??? Madre mía, que paciencia...' && read && vim \$*"

# Random 32-char string
alias rand.str="cat /dev/urandom | base64 | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1"

# Some bash-debugging help
debug.on() {
  export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
}

# Turn off SUPER VERBOSE bash-debugging help
alias debug.off='unset PS4'

# Run locally installed npm binaries
alias npm-exec='PATH=$(npm bin):$PATH'

# Sudo edit /etc/hosts
alias sys.hosts='sudo vim /etc/hosts'

# Restart Emulation Station
alias recalbox.es.restart="curl 'http://recalbox.local/post?action=reboot-es' -H 'Origin: http://recalbox.local' -H 'Accept-Encoding: gzip, deflate' -H 'Accept-Language: en-US,en;q=0.9,es;q=0.8' -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36' -H 'Content-Type: application/json' -H 'Accept: */*' -H 'Referer: http://recalbox.local/help' -H 'Connection: keep-alive' -H 'DNT: 1' --data-binary '{}' --compressed"

# Start/ Stop  Forti Vpn
alias vpn.activate="sudo /Users/juanito/Stuff/bgdts/fortivpn-mac/routes.sh add vpn"
alias vpn.deactivate="sudo /Users/juanito/Stuff/bgdts/fortivpn-mac/routes.sh del vpn"
alias vpn.restart="sudo bash -c '/Users/juanito/Stuff/bgdts/fortivpn-mac/routes.sh del vpn && sudo /Users/juanito/Stuff/bgdts/fortivpn-mac/routes.sh add vpn'"

# chdir to to a temporary location
alias cdtmp='cd "$(mktemp -d)"'

# Open a new iTerm tab and execute command
newtabi(){
  is.mac && osascript \
    -e 'tell application "iTerm2" to tell current window to set newWindow to (create tab with default profile)'\
    -e "tell application \"iTerm2\" to tell current session of newWindow to write text \"${*}\""
}

# curl + jq in one
jcurl() { curl -s -H 'Accept: application/json' "$@" | jq ; }

# NEW FZF GOODNESS
command -v fd-find >/dev/null && \
  alias fd=fd-fina

if command -v fzf >/dev/null ; then
  source ~/.fzf.bash

  # FZF Custom vars and functions
  export FZF_DEFAULT_OPTS='--layout=reverse --inline-info --height 40%'
  export FZF_DEFAULT_COMMAND='fd --type f'

  # Automagically autocomplete repo names and 'cd' into them. Needs a proper base repo dir. Depends on fzf and fd
  repo() {
    base_dir="${_REPO_AUTOCOMPLETE_BASE_DIR}"
    [ $# -gt 0 ] && regex="$(eval echo  \$$(($#)))" || regex="."
    [ -d "${base_dir}/${regex}" ] && \
      cd "${base_dir}/${regex}" || \
      cd "$(fd --maxdepth 2 --type d . "${base_dir}" | grep -i "${regex}" | fzf)" || true
  }

  # Vim + fzf (an easy alternative is vim **<TAB>)
  fim() {
    if [ $# -gt 0 ] ; then
      vim $(fd --type file $1 | fzf)
    else
      vim "$(fzf)"
    fi
  }
else
  cat << EOF
  Please install fzf and fd

  * fzf:  https://github.com/junegunn/fzf
  * fd:   https://github.com/sharkdp/fd
EOF
fi

# DO NOT VERSION THESE THANKS
[ -f ~/.bash_private_vars ] && source ~/.bash_private_vars
